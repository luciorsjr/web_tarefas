{"version":3,"sources":["views/Units.js"],"names":["timer","Wall","api","useApi","useState","loading","setLoading","list","setList","showModal","setShowModal","modalLoading","setModalLoading","modalId","setModalId","modalNameField","setModalNameField","modalOwnerSearchField","setModalOwnerSearchField","modalOwnerList","setModalOwnerList","modalOwnerField","setModalOwnerField","useEffect","getList","clearTimeout","setTimeout","searchUser","result","error","alert","getUnits","handleCloseModal","handleRemoveButton","id","window","confirm","removeUnit","handleModalSave","data","name","id_owner","addUnit","updateUnit","color","onClick","items","fields","label","key","sorter","_style","width","filter","noItemsViewSlot","columnFilter","hover","striped","bordered","pagination","itemsPerPage","scopedSlots","name_owner","item","actions","index","findIndex","v","handleEditButton","show","onClose","closeButton","htmlFor","type","value","onChange","e","target","length","sizeHtml","find","selectModalOwnerField","map","size","disabled"],"mappings":"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","file":"static/js/20.6341551c.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  CRow,\n  CCol,\n  CCard,\n  CCardHeader,\n  CButton,\n  CCardBody,\n  CDataTable,\n  CButtonGroup,\n  CModal,\n  CModalHeader,\n  CModalBody,\n  CModalFooter,\n  CFormGroup,\n  CLabel,\n  CInput,\n  CSelect,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport useApi from \"../services/api\";\n\nlet timer;\n\nexport default function Wall() {\n  const api = useApi();\n\n  const [loading, setLoading] = useState(true);\n  const [list, setList] = useState([]);\n  const [showModal, setShowModal] = useState(false);\n  const [modalLoading, setModalLoading] = useState(false);\n  const [modalId, setModalId] = useState(\"\");\n  const [modalNameField, setModalNameField] = useState(\"\");\n  const [modalOwnerSearchField, setModalOwnerSearchField] = useState(\"\");\n  const [modalOwnerList, setModalOwnerList] = useState([]);\n  const [modalOwnerField, setModalOwnerField] = useState(null);\n\n  const fields = [\n    { label: \"Unidade\", key: \"name\", sorter: false },\n    { label: \"Proprietário\", key: \"name_owner\", sorter: false },\n    {\n      label: \"Ações\",\n      key: \"actions\",\n      _style: { width: \"1px\" },\n      sorter: false,\n      filter: false,\n    },\n  ];\n\n  useEffect(() => {\n    getList();\n  }, []);\n\n  useEffect(() => {\n    if (modalOwnerSearchField !== \"\") {\n      clearTimeout(timer);\n      timer = setTimeout(searchUser, 1500);\n    }\n  }, [modalOwnerSearchField]);\n\n  const searchUser = async () => {\n    if (modalOwnerSearchField !== \"\") {\n      const result = await api.searchUser(modalOwnerSearchField);\n      if (result.error === \"\") {\n        setModalOwnerList(result.list);\n      } else {\n        alert(result.error);\n      }\n    }\n  };\n\n  const getList = async () => {\n    setLoading(true);\n    const result = await api.getUnits();\n    setLoading(false);\n    if (result.error === \"\") {\n      setList(result.list);\n    } else {\n      setList(result.error);\n    }\n  };\n\n  const handleCloseModal = () => {\n    setShowModal(false);\n  };\n\n  const handleEditButton = (id) => {\n    let index = list.findIndex((v) => v.id === id);\n\n    setModalId(list[index][\"id\"]);\n    setModalNameField(list[index][\"name\"]);\n    setModalOwnerList([]);\n    setModalOwnerSearchField(\"\");\n    if (list[index][\"name_owner\"]) {\n      setModalOwnerField({\n        name: list[index][\"name_owner\"],\n        id: list[index][\"id_owner\"],\n      });\n    } else {\n      setModalOwnerField(null);\n    }\n    setShowModal(true);\n  };\n\n  const handleRemoveButton = async (id) => {\n    if (window.confirm(\"Tem certeza que deseja excluir?\")) {\n      const result = await api.removeUnit(id);\n      if (result.error === \"\") {\n        getList();\n      } else {\n        alert(result.error);\n      }\n    }\n  };\n\n  const handleNewButton = () => {\n    setModalId(\"\");\n    setModalNameField(\"\");\n    setModalOwnerField(null);\n    setModalOwnerList([]);\n    setModalOwnerSearchField(\"\");\n    setShowModal(true);\n  };\n\n  const handleModalSave = async () => {\n    if (modalNameField) {\n      setModalLoading(true);\n      let result;\n      let data = {\n        name: modalNameField,\n        id_owner: modalOwnerField.id,\n      };\n\n      if (modalId === \"\") {\n        result = await api.addUnit(data);\n      } else {\n        result = await api.updateUnit(modalId, data);\n      }\n\n      setModalLoading(false);\n      if (result.error === \"\") {\n        setShowModal(false);\n        getList();\n      } else {\n        alert(result.error);\n      }\n    } else {\n      alert(\"Preencha os campos!\");\n    }\n  };\n\n  const selectModalOwnerField = (id) => {\n    let item = modalOwnerList.find((item) => item.id === id);\n    setModalOwnerField(item);\n    setModalOwnerList([]);\n    setModalOwnerSearchField(\"\");\n  };\n\n  return (\n    <>\n      <CRow>\n        <CCol>\n          <h2>Unidades</h2>\n          <CCard>\n            <CCardHeader>\n              <CButton color=\"primary\" onClick={handleNewButton}>\n                <CIcon name=\"cil-check\" />\n                Nova Unidade\n              </CButton>\n            </CCardHeader>\n            <CCardBody>\n              <CDataTable\n                items={list}\n                fields={fields}\n                loading={loading}\n                noItemsViewSlot=\" \"\n                columnFilter\n                sorter\n                hover\n                striped\n                bordered\n                pagination\n                itemsPerPage={10}\n                scopedSlots={{\n                  name_owner: (item) => <td>{item.name_owner ?? \"-\"}</td>,\n                  actions: (item) => (\n                    <td>\n                      <CButtonGroup>\n                      <CButton\n                          color=\"success\"\n                          onClick={null}\n                        >\n                          Detalhes\n                        </CButton>\n                        <CButton\n                          color=\"info\"\n                          onClick={() => handleEditButton(item.id)}\n                        >\n                          Editar\n                        </CButton>\n                        <CButton\n                          color=\"danger\"\n                          onClick={() => handleRemoveButton(item.id)}\n                        >\n                          Excluir\n                        </CButton>\n                      </CButtonGroup>\n                    </td>\n                  ),\n                }}\n              />\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n\n      <CModal show={showModal} onClose={handleCloseModal}>\n        <CModalHeader closeButton>\n          {modalId === \"\" ? \"Nova\" : \"Editar\"} Unidade\n        </CModalHeader>\n        <CModalBody>\n          <CFormGroup>\n            <CLabel htmlFor=\"modal-name\">Nome da unidade</CLabel>\n            <CInput\n              type=\"text\"\n              id=\"modal-name\"\n              value={modalNameField}\n              onChange={(e) => setModalNameField(e.target.value)}\n            />\n          </CFormGroup>\n\n          <CFormGroup>\n            <CLabel htmlFor=\"modal-owner\">\n              Proprietário (nome,cpf ou e-mail)\n            </CLabel>\n\n            {modalOwnerField === null && (\n              <>\n                <CInput\n                  type=\"text\"\n                  id=\"modal-owner\"\n                  value={modalOwnerSearchField}\n                  onChange={(e) => setModalOwnerSearchField(e.target.value)}\n                />\n\n                {modalOwnerList.length > 0 && (\n                  <CSelect\n                    sizeHtml={5}\n                    onChange={(e) => selectModalOwnerField(e.target.value)}\n                  >\n                    {modalOwnerList.map((item, index) => (\n                      <option key={index} value={item.id}>\n                        {item.name}\n                      </option>\n                    ))}\n                  </CSelect>\n                )}\n              </>\n            )}\n\n            {modalOwnerField !== null && (\n              <>\n                <br />\n                <CButton\n                  size=\"sm\"\n                  color=\"danger\"\n                  onClick={() => setModalOwnerField(null)}\n                >\n                  X\n                </CButton>\n                {modalOwnerField.name}\n              </>\n            )}\n          </CFormGroup>\n        </CModalBody>\n\n        <CModalFooter>\n          <CButton\n            color=\"primary\"\n            onClick={handleModalSave}\n            disabled={modalLoading}\n          >\n            {modalLoading ? \"Carregando...\" : \"Salvar\"}\n          </CButton>\n          <CButton\n            color=\"secondary\"\n            onClick={handleCloseModal}\n            disabled={modalLoading}\n          >\n            {modalLoading ? \"Carregando...\" : \"Cancelar\"}\n          </CButton>\n        </CModalFooter>\n      </CModal>\n    </>\n  );\n}\n"],"sourceRoot":""}