{"version":3,"sources":["views/Fin_Plano.js"],"names":["Pagar_Receber","api","useApi","useState","loading","setLoading","list","setList","showModal","setShowModal","modalLoading","setModalLoading","modalTitleField","setModalTitleField","modalConta_idField","setModalConta_idField","modalDescricaoField","setModalDescricaoField","modalTipoField","setModalTipoField","modalNaturezaField","setModalNaturezaField","modalConta_DebField","setModalConta_DebField","modalConta_CredField","setModalConta_CredField","modalContabilizaField","setModalContabilizaField","modalId","setModalId","useEffect","getList","getFin_Plano","result","error","handleCloseModal","handleRemoveButton","id","window","confirm","removeWall","alert","handleModalSave","data","title","conta_id","descricao","tipo","natureza","conta_deb","conta_cred","contabiliza","addWall","updateWall","color","onClick","name","items","fields","label","key","_style","width","noItemsViewSlot","hover","striped","bordered","border","clickableRows","captionSlot","pagination","itemsPerPage","scopedSlots","actions","item","index","findIndex","v","handleEditButton","show","onClose","closeButton","htmlFor","type","placeholder","value","onChange","e","target","disabled"],"mappings":"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","file":"static/js/14.345f52d4.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  CRow,\n  CCol,\n  CCard,\n  CCardHeader,\n  CButton,\n  CCardBody,\n  CDataTable,\n  CButtonGroup,\n  CModal,\n  CModalHeader,\n  CModalBody,\n  CModalFooter,\n  CFormGroup,\n  CLabel,\n  CInput,\n  CTextarea,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport useApi from \"../services/api\";\n\nexport default function Pagar_Receber() {\n  const api = useApi();\n\n  const [loading, setLoading] = useState(true);\n  const [list, setList] = useState([]);\n  const [showModal, setShowModal] = useState(false);\n  const [modalLoading, setModalLoading] = useState(false);\n  const [modalTitleField, setModalTitleField] = useState(\"\");\n  const [modalConta_idField, setModalConta_idField] = useState(\"\");\n  const [modalDescricaoField, setModalDescricaoField] = useState(\"\");\n  const [modalTipoField, setModalTipoField] = useState(\"\");\n  const [modalNaturezaField, setModalNaturezaField] = useState(\"\");\n  const [modalConta_DebField, setModalConta_DebField] = useState(\"\");\n  const [modalConta_CredField, setModalConta_CredField] = useState(\"\");\n  const [modalContabilizaField, setModalContabilizaField] = useState(\"\");\n  const [modalId, setModalId] = useState(\"\");\n  const formatCurrency = (value) =>  {\n    return value.toLocaleString('pt-BR', { minimumFractionDigits: 2})\n  };\n\n  const fields = [\n    { label: \"Conta_id\", key: \"id\", _style: { width: \"10px\" } },\n    { label: \"Descrição\", key: \"descricao\", _style: { width: \"10px\" } },\n    { label: \"Tipo\", key: \"tipo\", _style: { width: \"10px\" } },\n    { label: \"Natureza\", key: \"natureza\", _style: { width: \"80px\" } },\n    { label: \"Conta Deb.\", key: \"conta_deb\", _style: { width: \"80px\" } },\n    { label: \"Conta Cred.\", key: \"pessoa_cred\", _style: { width: \"80px\" } },\n    { label: \"Contabiliza\", key: \"contabiliza\", _style: { width: \"80px\" } },\n    { label: \"Ações\", key: \"actions\", _style:{width:\"1px\"}},\n  ];\n\n  useEffect(() => {\n    getList();\n  }, []);\n\n  const getList = async () => {\n    setLoading(true);\n    const result = await api.getFin_Plano();\n    setLoading(false);\n    if (result.error === \"\") {\n      setList(result.list);\n    } else {\n      setList(result.error);\n    }\n  };\n\n  const handleCloseModal = () => {\n    setShowModal(false);\n  };\n\n  const handleEditButton = (id) => {\n    let index = list.findIndex(v=>v.id===id);\n    setModalId(list[index][\"id\"]);\n    setModalTitleField(list[index][\"title\"]);\n    setModalConta_idField(list[index][\"conta_id\"]);\n    setModalDescricaoField(list[index][\"data_pagto\"]);\n    setModalTipoField(list[index][\"tipoField\"]); \n    setModalDescricaoField(list[index][\"descricao_id\"]);\n    setModalConta_DebField(list[index][\"conta_deb\"]);\n    setModalConta_CredField(list[index][\"conta_cred\"]);\n    setShowModal(true);\n  };\n\n  const handleRemoveButton = async (id) => {\n    if (window.confirm(\"Confirma a exclusão?\")) {\n      const result = await api.removeWall(id);\n      if (result.error === \"\") {\n        getList();\n      } else {\n        alert(result.error);\n      }\n    }\n  };\n\n  const handleNewButton = () => {\n    setModalId(\"\");\n    setModalTitleField(\"\");\n\n    setModalConta_idField(\"\"); \n    setModalDescricaoField(\"\");\n    setModalTipoField(\"\");\n    setModalNaturezaField(\"\");\n    setModalConta_DebField(\"\");\n    setModalConta_CredField(\"\");\n    setModalContabilizaField(\"\");\n    setShowModal(true);\n  };\n\n  const handleModalSave = async () => {\n    if (modalTitleField && modalDescricaoField) {\n      setModalLoading(true);\n      let result;\n      let data = {\n        title: modalTitleField,\n        conta_id: modalConta_idField,\n        descricao: modalDescricaoField,\n        tipo: modalTipoField,\n        natureza: modalNaturezaField,\n        conta_deb: modalConta_DebField,\n        conta_cred: modalConta_CredField,\n        contabiliza: modalContabilizaField,\n      };\n\n      if (modalId === \"\") {\n        result = await api.addWall(data);\n      } else {\n        result = await api.updateWall(modalId, data);\n      }\n\n      setModalLoading(false);\n      if (result.error === \"\") {\n        setShowModal(false);\n        getList();\n      } else {\n        alert(result.error);\n      }\n    } else {\n      alert(\"Preencha os campos!\");\n    }\n  };\n\n  return (\n    <>\n      <CRow>\n        <CCol>\n          <h2>Plano de Contas</h2>\n          <CCard>\n            <CCardHeader>\n              <CButton color=\"primary\" onClick={handleNewButton}>\n                <CIcon name=\"cil-check\" />\n                Inclusão\n              </CButton>\n            </CCardHeader>\n            <CCardBody>\n              <CDataTable\n                items={list}\n                fields={fields}\n                loading={loading}\n                noItemsViewSlot=\" \"\n                hover\n                striped\n                bordered\n                border\n                clickableRows\n                captionSlot={5}\n                pagination\n                itemsPerPage={10}\n                scopedSlots={{\n                  actions: (item) => (\n                    <td>\n                      <CButtonGroup>\n                        <CButton\n                          color=\"info\"\n                          onClick={() => handleEditButton(item.id)}                          \n                        >\n                          Alterar\n                        </CButton>\n                        <CButton\n                          color=\"danger\"\n                          onClick={() => handleRemoveButton(item.id)}                          \n                        >\n                          Excluir\n                        </CButton>\n                      </CButtonGroup>\n                    </td>\n                  ),\n                }}\n              />\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n\n      <CModal show={showModal} onClose={handleCloseModal}>\n        <CModalHeader closeButton>\n          {modalId === \"\" ? \"Novo\" : \"Alterar\"} - Plano de Contas\n        </CModalHeader>\n        <CModalBody>\n          <CFormGroup>\n            <CLabel htmlFor=\"modal-title\">Conta</CLabel>\n            <CInput\n              type=\"text\"\n              id=\"modal-conta_id\"\n              placeholder=\"Digite o código da Conta\"\n              value={modalConta_idField}\n              onChange={(e) => setModalConta_idField(e.target.value)}\n              disabled={modalLoading}\n            />\n          </CFormGroup>\n          <CFormGroup>\n            <CLabel htmlFor=\"modal-descricao_id\">Descrição</CLabel>\n            <CInput\n              type=\"text\"\n              id=\"modal-descricao_id\"\n              placeholder=\"Informe a Descrição da Conta\"\n              value={modalDescricaoField}\n              onChange={(e) => setModalDescricaoField(e.target.value)}\n              disabled={modalLoading}\n            />\n          </CFormGroup>\n          <CFormGroup>\n            <CLabel htmlFor=\"modal-tipo\">Tipo</CLabel>\n            <CTextarea\n              id=\"modal-tipo\"\n              placeholder=\"Informe o Tipo de Conta\"\n              value={modalTipoField}\n              onChange={(e) => setModalTipoField(e.target.value)}\n              disabled={modalLoading}\n            />\n          </CFormGroup>\n\n          <CFormGroup>\n            <CLabel htmlFor=\"modal-natureza\">Natureza</CLabel>\n            <CInput\n              type=\"text\"\n              id=\"modal-natureza\"\n              value={modalNaturezaField}\n              onChange={(e) => setModalNaturezaField(e.target.value)}\n              disabled={modalLoading}\n              width={\"1px\"}\n            />\n          </CFormGroup>\n\n\n\n        </CModalBody>\n        <CModalFooter>\n          <CButton\n            color=\"primary\"\n            onClick={handleModalSave}\n            disabled={modalLoading}\n          >\n            {modalLoading ? \"Carregando...\" : \"Salvar\"}\n          </CButton>\n          <CButton\n            color=\"secondary\"\n            onClick={handleCloseModal}\n            disabled={modalLoading}\n          >\n            {modalLoading ? \"Carregando...\" : \"Cancelar\"}\n          </CButton>\n        </CModalFooter>\n      </CModal>\n    </>\n  );\n}\n"],"sourceRoot":""}