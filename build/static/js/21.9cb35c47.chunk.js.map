{"version":3,"sources":["views/Users.js"],"names":["Wall","api","useApi","useState","loading","setLoading","list","setList","showModal","setShowModal","modalLoading","setModalLoading","modalId","setModalId","modalNameField","setModalNameField","modalEmailField","setModalEmailField","modalCpfField","setModalCpfField","modalPass1Field","setModalPass1Field","modalPass2Field","setModalPass2Field","useEffect","getList","getUsers","result","error","handleCloseModal","handleRemoveButton","id","window","confirm","removeUser","alert","handleModalSave","data","name","email","cpf","password","addUser","updateUser","color","onClick","items","fields","label","key","_style","width","sorter","filter","noItemsViewSlot","columnFilter","hover","striped","bordered","pagination","itemsPerPage","scopedSlots","reservation_date","item","reservation_date_formatted","actions","index","findIndex","v","handleEditButton","show","onClose","closeButton","htmlFor","type","value","onChange","e","target","disabled","placeholder"],"mappings":"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","file":"static/js/21.9cb35c47.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  CRow,\n  CCol,\n  CCard,\n  CCardHeader,\n  CButton,\n  CCardBody,\n  CDataTable,\n  CButtonGroup,\n  CModal,\n  CModalHeader,\n  CModalBody,\n  CModalFooter,\n  CFormGroup,\n  CLabel,\n  CInput,\n  CSelect,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport useApi from \"../services/api\";\n\nexport default function Wall() {\n  const api = useApi();\n\n  const [loading, setLoading] = useState(true);\n  const [list, setList] = useState([]);\n  const [showModal, setShowModal] = useState(false);\n  const [modalLoading, setModalLoading] = useState(false);\n  const [modalId, setModalId] = useState(\"\");\n  const [modalNameField, setModalNameField] = useState(\"\");\n  const [modalEmailField, setModalEmailField] = useState(\"\");\n  const [modalCpfField, setModalCpfField] = useState(\"\");\n  const [modalPass1Field, setModalPass1Field] = useState(\"\");\n  const [modalPass2Field, setModalPass2Field] = useState(\"\");\n\n  const fields = [\n    { label: \"Nome\", key: \"name\" },\n    { label: \"E-mail\", key: \"email\" },\n    { label: \"CPF\", key: \"cpf\" },\n    {\n      label: \"Ações\",\n      key: \"actions\",\n      _style: { width: \"1px\" },\n      sorter: false,\n      filter: false,\n    },\n  ];\n\n  useEffect(() => {\n    getList();\n  }, []);\n\n  const getList = async () => {\n    setLoading(true);\n    const result = await api.getUsers();\n    setLoading(false);\n    if (result.error === \"\") {\n      setList(result.list);\n    } else {\n      setList(result.error);\n    }\n  };\n\n  const handleCloseModal = () => {\n    setShowModal(false);\n  };\n\n  const handleEditButton = (id) => {\n    let index = list.findIndex((v) => v.id === id);\n\n    setModalId(list[index][\"id\"]);\n\n    setModalNameField(list[index][\"name\"]);\n    setModalEmailField(list[index][\"email\"]);\n    setModalCpfField(list[index][\"cpf\"]);\n    setModalPass1Field(\"\");\n    setModalPass2Field(\"\");\n\n    setShowModal(true);\n  };\n\n  const handleRemoveButton = async (id) => {\n    if (window.confirm(\"Tem certeza que deseja excluir?\")) {\n      const result = await api.removeUser(id);\n      if (result.error === \"\") {\n        getList();\n      } else {\n        alert(result.error);\n      }\n    }\n  };\n\n  const handleNewButton = () => {\n    setModalId(\"\");\n    setModalNameField(\"\");\n    setModalEmailField(\"\");\n    setModalCpfField(\"\");\n    setModalPass1Field(\"\");\n    setModalPass2Field(\"\");\n    setShowModal(true);\n  };\n\n  const handleModalSave = async () => {\n    if (modalNameField && modalEmailField && modalCpfField) {\n      setModalLoading(true);\n      let result;\n      let data = {\n        name: modalNameField,\n        email: modalEmailField,\n        cpf: modalCpfField,\n      };\n\n      if (modalPass1Field) {\n        if (modalPass1Field === modalPass2Field) {\n          data.password = modalPass1Field;\n        } else {\n          alert(\"Senhas não batem\");\n          setModalLoading(false);\n        }\n      }\n\n      if (modalId === \"\") {\n        result = await api.addUser(data);\n      } else {\n        result = await api.updateUser(modalId, data);\n      }\n\n      setModalLoading(false);\n      if (result.error === \"\") {\n        setShowModal(false);\n        getList();\n      } else {\n        alert(result.error);\n      }\n    } else {\n      alert(\"Preencha os campos!\");\n    }\n  };\n\n  return (\n    <>\n      <CRow>\n        <CCol>\n          <h2>Usuários</h2>\n          <CCard>\n            <CCardHeader>\n              <CButton color=\"primary\" onClick={handleNewButton}>\n                <CIcon name=\"cil-check\" />\n                Novo Usuário\n              </CButton>\n            </CCardHeader>\n            <CCardBody>\n              <CDataTable\n                items={list}\n                fields={fields}\n                loading={loading}\n                noItemsViewSlot=\" \"\n                columnFilter\n                sorter\n                hover\n                striped\n                bordered\n                pagination\n                itemsPerPage={10}\n                scopedSlots={{\n                  reservation_date: (item) => (\n                    <td>{item.reservation_date_formatted}</td>\n                  ),\n                  actions: (item, index) => (\n                    <td>\n                      <CButtonGroup>\n                        <CButton\n                          color=\"info\"\n                          onClick={() => handleEditButton(item.id)}\n                        >\n                          Editar\n                        </CButton>\n                        <CButton\n                          color=\"danger\"\n                          onClick={() => handleRemoveButton(item.id)}\n                        >\n                          Excluir\n                        </CButton>\n                      </CButtonGroup>\n                    </td>\n                  ),\n                }}\n              />\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n\n      <CModal show={showModal} onClose={handleCloseModal}>\n        <CModalHeader closeButton>\n          {modalId === \"\" ? \"Novo\" : \"Editar\"} Usuário\n        </CModalHeader>\n        <CModalBody>\n          <CFormGroup>\n            <CLabel htmlFor=\"modal-name\">Nome do usuário</CLabel>\n            <CInput\n              type=\"text\"\n              id=\"modal-name\"\n              value={modalNameField}\n              onChange={(e) => setModalNameField(e.target.value)}\n              disabled={modalLoading}\n            />\n          </CFormGroup>\n\n          <CFormGroup>\n            <CLabel htmlFor=\"modal-name\">E-mail do usuário</CLabel>\n            <CInput\n              type=\"email\"\n              id=\"modal-email\"\n              value={modalEmailField}\n              onChange={(e) => setModalEmailField(e.target.value)}\n              disabled={modalLoading}\n            />\n          </CFormGroup>\n\n          <CFormGroup>\n            <CLabel htmlFor=\"modal-cpf\">CPF do usuário</CLabel>\n            <CInput\n              type=\"text\"\n              id=\"modal-cpf\"\n              value={modalCpfField}\n              onChange={(e) => setModalCpfField(e.target.value)}\n              disabled={modalLoading}\n            />\n          </CFormGroup>\n\n          <CFormGroup>\n            <CLabel htmlFor=\"modal-pass1\">Nova Senha</CLabel>\n            <CInput\n              type=\"text\"\n              id=\"modal-pass1\"\n              placeholder=\"Digite uma nova senha para o usuário\"\n              value={modalPass1Field}\n              onChange={(e) => setModalPass1Field(e.target.value)}\n              disabled={modalLoading}\n            />\n          </CFormGroup>\n\n          <CFormGroup>\n            <CLabel htmlFor=\"modal-pass2\">Confirme a nova senha</CLabel>\n            <CInput\n              type=\"text\"\n              id=\"modal-pass2\"\n              placeholder=\"Digite uma nova senha para o usuário\"\n              value={modalPass2Field}\n              onChange={(e) => setModalPass2Field(e.target.value)}\n              disabled={modalLoading}\n            />\n          </CFormGroup>\n        </CModalBody>\n        <CModalFooter>\n          <CButton\n            color=\"primary\"\n            onClick={handleModalSave}\n            disabled={modalLoading}\n          >\n            {modalLoading ? \"Carregando...\" : \"Salvar\"}\n          </CButton>\n          <CButton\n            color=\"secondary\"\n            onClick={handleCloseModal}\n            disabled={modalLoading}\n          >\n            {modalLoading ? \"Carregando...\" : \"Cancelar\"}\n          </CButton>\n        </CModalFooter>\n      </CModal>\n    </>\n  );\n}\n"],"sourceRoot":""}