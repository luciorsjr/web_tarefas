{"version":3,"sources":["views/Reservations.js"],"names":["Wall","api","useApi","useState","loading","setLoading","list","setList","showModal","setShowModal","modalLoading","setModalLoading","modalId","setModalId","modalUnitList","setModalUnitList","modalAreaList","setModalAreaList","modalUnitId","setModalUnitId","modalAreaId","setModalAreaId","modalDateField","setModalDateField","useEffect","getList","getUnitList","getAreaList","getReservations","result","error","getUnits","getAreas","handleCloseModal","handleRemoveButton","id","window","confirm","removeReservation","alert","handleModalSave","data","id_unit","id_area","reservation_date","addReservation","updateReservation","color","onClick","disabled","length","name","items","fields","label","key","sorter","_style","width","filter","noItemsViewSlot","columnFilter","hover","striped","bordered","pagination","itemsPerPage","scopedSlots","item","reservation_date_formatted","actions","index","findIndex","v","handleEditButton","show","onClose","closeButton","htmlFor","custom","onChange","e","target","value","map","title","type"],"mappings":"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","file":"static/js/18.d7e80df0.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  CRow,\n  CCol,\n  CCard,\n  CCardHeader,\n  CButton,\n  CCardBody,\n  CDataTable,\n  CButtonGroup,\n  CModal,\n  CModalHeader,\n  CModalBody,\n  CModalFooter,\n  CFormGroup,\n  CLabel,\n  CInput,\n  CSelect,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport useApi from \"../services/api\";\n\nexport default function Wall() {\n  const api = useApi();\n\n  const [loading, setLoading] = useState(true);\n  const [list, setList] = useState([]);\n  const [showModal, setShowModal] = useState(false);\n  const [modalLoading, setModalLoading] = useState(false);\n  const [modalId, setModalId] = useState(\"\");\n  const [modalUnitList, setModalUnitList] = useState([]);\n  const [modalAreaList, setModalAreaList] = useState([]);\n  const [modalUnitId, setModalUnitId] = useState(0);\n  const [modalAreaId, setModalAreaId] = useState(0);\n  const [modalDateField, setModalDateField] = useState(\"\");\n\n  const fields = [\n    { label: \"Unidade\", key: \"name_unit\", sorter: false },\n    { label: \"Área\", key: \"name_area\", sorter: false },\n    { label: \"Data da reserva\", key: \"reservation_date\" },\n    {\n      label: \"Ações\",\n      key: \"actions\",\n      _style: { width: \"1px\" },\n      sorter: false,\n      filter: false,\n    },\n  ];\n\n  useEffect(() => {\n    getList();\n    getUnitList();\n    getAreaList();\n  }, []);\n\n  const getList = async () => {\n    setLoading(true);\n    const result = await api.getReservations();\n    setLoading(false);\n    if (result.error === \"\") {\n      setList(result.list);\n    } else {\n      setList(result.error);\n    }\n  };\n\n  const getUnitList = async () => {\n    const result = await api.getUnits();\n    if (result.error === \"\") {\n      setModalUnitList(result.list);\n    }\n  };\n\n  const getAreaList = async () => {\n    const result = await api.getAreas();\n    if (result.error === \"\") {\n      setModalAreaList(result.list);\n    }\n  };\n\n  const handleCloseModal = () => {\n    setShowModal(false);\n  };\n\n  const handleEditButton = (id) => {\n    let index = list.findIndex(v=>v.id===id)\n\n    setModalId(list[index][\"id\"]);\n    setModalUnitId(list[index][\"id_unit\"])\n    setModalAreaId(list[index][\"id_area\"])\n    setModalDateField(list[index][\"reservation_date\"])\n    setShowModal(true);\n  };\n\n  const handleRemoveButton = async (id) => {\n    if (window.confirm(\"Tem certeza que deseja excluir?\")) {\n      const result = await api.removeReservation(id);\n      if (result.error === \"\") {\n        getList();\n      } else {\n        alert(result.error);\n      }\n    }\n  };\n\n  const handleNewButton = () => {\n    setModalId(\"\");\n    setModalUnitId(modalUnitList[0][\"id\"])\n    setModalAreaId(modalAreaList[0][\"id\"])\n    setModalDateField()\n    setShowModal(true);\n  };\n\n  const handleModalSave = async () => {\n    if (modalUnitId && modalAreaId && modalDateField) {\n      setModalLoading(true);\n      let result;\n      let data = {\n        id_unit: modalUnitId,\n        id_area: modalAreaId,\n        reservation_date: modalDateField\n      };\n\n      if (modalId === \"\") {\n       result = await api.addReservation(data)\n      } else {\n        result = await api.updateReservation(modalId,data)\n      }\n\n      setModalLoading(false);\n      if (result.error === \"\") {\n        setShowModal(false);\n        getList();\n      } else {\n        alert(result.error);\n      }\n    } else {\n      alert(\"Preencha os campos!\");\n    }\n  };\n\n  return (\n    <>\n      <CRow>\n        <CCol>\n          <h2>Reservas</h2>\n          <CCard>\n            <CCardHeader>\n              <CButton\n                color=\"primary\"\n                onClick={handleNewButton}\n                disabled={\n                  modalUnitList.length === 0 || modalAreaList.length === 0\n                }\n              >\n                <CIcon name=\"cil-check\" />\n                Nova Reserva\n              </CButton>\n            </CCardHeader>\n            <CCardBody>\n              <CDataTable\n                items={list}\n                fields={fields}\n                loading={loading}\n                noItemsViewSlot=\" \"\n                columnFilter\n                sorter\n                hover\n                striped\n                bordered\n                pagination\n                itemsPerPage={10}\n                scopedSlots={{\n                  reservation_date: (item) => (\n                    <td>{item.reservation_date_formatted}</td>\n                  ),\n                  actions: (item) => (\n                    <td>\n                      <CButtonGroup>\n                        <CButton\n                          color=\"info\"\n                          onClick={() => handleEditButton(item.id)}\n                          disabled={\n                            modalUnitList.length === 0 ||\n                            modalAreaList.length === 0\n                          }\n                        >\n                          Editar\n                        </CButton>\n                        <CButton\n                          color=\"danger\"\n                          onClick={() => handleRemoveButton(item.id)}\n                        >\n                          Excluir\n                        </CButton>\n                      </CButtonGroup>\n                    </td>\n                  ),\n                }}\n              />\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n\n      <CModal show={showModal} onClose={handleCloseModal}>\n        <CModalHeader closeButton>\n          {modalId === \"\" ? \"Nova\" : \"Editar\"} Reserva\n        </CModalHeader>\n        <CModalBody>\n          <CFormGroup>\n            <CLabel htmlFor=\"modal_unit\">Unidade</CLabel>\n            <CSelect\n              id=\"modal-unit\"\n              custom\n              onChange={(e) => setModalUnitId(e.target.value)}\n              value={modalUnitId}\n            >\n              {modalUnitList.map((item, index) => (\n                <option\n                  key={index}\n                  value={item.id}\n                >\n                  {item.name}\n                </option>\n              ))}\n            </CSelect>\n          </CFormGroup>\n\n          <CFormGroup>\n            <CLabel htmlFor=\"modal_area\">Área</CLabel>\n            <CSelect\n              id=\"modal-area\"\n              custom\n              onChange={(e) => setModalAreaId(e.target.value)}\n              value={modalAreaId}\n            >\n              {modalAreaList.map((item, index) => (\n                <option\n                  key={index}\n                  value={item.id}\n                >\n                  {item.title}\n                </option>\n              ))}\n            </CSelect>\n          </CFormGroup>\n\n          <CFormGroup>\n            <CLabel htmlFor=\"modal-date\">Data da Reserva</CLabel>\n            <CInput\n              type=\"text\"\n              id=\"modal-date\"\n              value={modalDateField}\n              onChange={(e) => setModalDateField(e.target.value)}\n              disabled={modalLoading}\n            />\n          </CFormGroup>\n        </CModalBody>\n        <CModalFooter>\n          <CButton\n            color=\"primary\"\n            onClick={handleModalSave}\n            disabled={modalLoading}\n          >\n            {modalLoading ? \"Carregando...\" : \"Salvar\"}\n          </CButton>\n          <CButton\n            color=\"secondary\"\n            onClick={handleCloseModal}\n            disabled={modalLoading}\n          >\n            {modalLoading ? \"Carregando...\" : \"Cancelar\"}\n          </CButton>\n        </CModalFooter>\n      </CModal>\n    </>\n  );\n}\n"],"sourceRoot":""}