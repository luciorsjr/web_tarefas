{"version":3,"sources":["views/Warnings.js"],"names":["Wall","api","useApi","useState","loading","setLoading","list","setList","photoList","setPhotoList","photoListIndex","setPhotoListIndex","useEffect","getList","getWarnings","result","error","handleSwitchClick","item","updateWarning","id","alert","items","fields","label","key","filter","sorter","noItemsViewSlot","columnFilter","hover","striped","bordered","pagination","itemsPerPage","scopedSlots","photos","length","color","onClick","showLightbox","datecreated_formatted","checked","status","onChange","e","mainSrc","nextSrc","prevSrc","onCloseRequest","onMovePrevRequest","undefined","onMoveNextRequest","reactModalStyle","overlay","zIndex"],"mappings":"8SAce,SAASA,IACtB,IAAMC,EAAMC,cAEZ,EAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAkCJ,mBAAS,IAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAA4CN,mBAAS,GAArD,mBAAOO,EAAP,KAAuBC,EAAvB,KAUAC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAO,iDAAG,qGACdR,GAAW,GADG,SAEOJ,EAAIa,cAFX,OAERC,EAFQ,OAGdV,GAAW,GACU,KAAjBU,EAAOC,MACTT,EAAQQ,EAAOT,MAEfC,EAAQQ,EAAOC,OAPH,2CAAH,qDAWPC,EAAiB,iDAAG,WAAOC,GAAP,wFACxBb,GAAW,GADa,SAEHJ,EAAIkB,cAAcD,EAAKE,IAFpB,OAElBL,EAFkB,OAGxBV,GAAW,GACS,KAAjBU,EAAOC,MACRH,IAEAQ,MAAMN,EAAOC,OAPS,2CAAH,sDAgBvB,OACE,qCACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,gDACA,cAAC,IAAD,UAEE,cAAC,IAAD,UACE,cAAC,IAAD,CACEM,MAAOhB,EACPiB,OAjDC,CACb,CAAEC,MAAO,YAAaC,IAAK,SAASC,QAAQ,GAC5C,CAAEF,MAAO,UAAWC,IAAK,YAAYE,QAAQ,GAC7C,CAAEH,MAAO,YAAUC,IAAK,QAAQE,QAAQ,GACxC,CAAEH,MAAO,QAASC,IAAK,SAASE,QAAQ,EAAOD,QAAQ,GACvD,CAAEF,MAAO,OAAQC,IAAK,gBA6CVrB,QAASA,EACTwB,gBAAgB,IAChBC,cAAY,EACZF,QAAM,EACNG,OAAK,EACLC,SAAO,EACPC,UAAQ,EACRC,YAAU,EACVC,aAAc,GACdC,YAAa,CACZ,OAAU,SAACjB,GAAD,OACR,6BACGA,EAAKkB,OAAOC,OAAS,GACnB,eAAC,IAAD,CAASC,MAAM,UAAUC,QAAS,kBA7BnC,SAACH,GACpBzB,EAAkB,GAClBF,EAAa2B,GA2B6CI,CAAatB,EAAKkB,SAAxD,UACGlB,EAAKkB,OAAOC,OADf,QACiD,IAArBnB,EAAKkB,OAAOC,OAAW,IAAI,SAK9D,YAAe,SAACnB,GAAD,OACd,6BACGA,EAAKuB,yBAGT,OAAU,SAACvB,GAAD,OACT,6BACE,cAAC,IAAD,CACEwB,QAAyB,aAAhBxB,EAAKyB,OACdL,MAAM,UACNM,SAAU,SAACC,GAAD,OAAK5B,EAAkBC,qBAWhDV,EAAU6B,OAAS,GAChB,cAAC,IAAD,CACES,QAAStC,EAAUE,GACnBqC,QAASvC,EAAUE,EAAe,GAClCsC,QAASxC,EAAUE,EAAe,GAClCuC,eAAgB,kBAAIxC,EAAa,KACjCyC,kBAAmB,gBACkBC,IAAhC3C,EAAUE,EAAe,IAC1BC,EAAkBD,EAAgB,IAGtC0C,kBAAmB,gBACkBD,IAAhC3C,EAAUE,EAAe,IAC1BC,EAAkBD,EAAgB,IAGtC2C,gBAAiB,CAACC,QAAS,CAACC,OAAQ","file":"static/js/23.77418fe4.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  CRow,\n  CCol,\n  CCard,\n  CCardBody,\n  CButton,\n  CSwitch,\n  CDataTable,\n} from \"@coreui/react\";\nimport useApi from \"../services/api\";\nimport Lightbox from \"react-image-lightbox\";\nimport \"react-image-lightbox/style.css\"\n\nexport default function Wall() {\n  const api = useApi();\n\n  const [loading, setLoading] = useState(true);\n  const [list, setList] = useState([]);\n  const [photoList, setPhotoList] = useState([]);\n  const [photoListIndex, setPhotoListIndex] = useState(0);\n  \n  const fields = [\n    { label: \"Resolvido\", key: \"status\",filter: false},\n    { label: \"Unidade\", key: \"name_unit\",sorter: false},\n    { label: \"Título\", key: \"title\",sorter: false},\n    { label: \"Fotos\", key: \"photos\",sorter: false, filter: false},\n    { label: \"Data\", key: \"datecreated\"},\n  ];\n\n  useEffect(() => {\n    getList();\n  }, []);\n\n  const getList = async () => {\n    setLoading(true);\n    const result = await api.getWarnings();\n    setLoading(false);\n    if (result.error === \"\") {\n      setList(result.list);\n    } else {\n      setList(result.error);\n    }\n  };\n\n  const handleSwitchClick = async (item) => {\n    setLoading(true)\n    const result = await api.updateWarning(item.id)\n    setLoading(false)\n    if(result.error === \"\") {\n      getList()\n    } else {\n      alert(result.error)\n    }\n  }\n\n  const showLightbox = (photos) => {\n    setPhotoListIndex(0)\n    setPhotoList(photos)\n  }\n\n  return (\n    <>\n      <CRow>\n        <CCol>\n          <h2>Ocorrências</h2>\n          <CCard>\n          \n            <CCardBody>\n              <CDataTable\n                items={list}\n                fields={fields}\n                loading={loading}\n                noItemsViewSlot=\" \"\n                columnFilter\n                sorter\n                hover\n                striped\n                bordered\n                pagination\n                itemsPerPage={10}\n                scopedSlots={{\n                 \"photos\": (item) => (\n                   <td>\n                     {item.photos.length > 0 &&\n                        <CButton color=\"success\" onClick={()=>showLightbox(item.photos)}>\n                          {item.photos.length} foto{item.photos.length!==1?\"s\":\"\"}\n                        </CButton>\n                     }\n                   </td>\n                 ),\n                 \"datecreated\": (item) => (\n                  <td>\n                    {item.datecreated_formatted}\n                  </td>\n                 ),\n                 \"status\": (item) => (\n                  <td>\n                    <CSwitch\n                      checked={item.status === \"RESOLVED\"}\n                      color=\"success\"\n                      onChange={(e)=>handleSwitchClick(item)}\n                    />\n                  </td>\n                 ),\n                }}\n              />\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      \n      {photoList.length > 0 &&\n          <Lightbox\n            mainSrc={photoList[photoListIndex]}\n            nextSrc={photoList[photoListIndex+1]}\n            prevSrc={photoList[photoListIndex-1]}\n            onCloseRequest={()=>setPhotoList([])}\n            onMovePrevRequest={()=>{\n              if(photoList[photoListIndex-1] !== undefined) {\n                setPhotoListIndex(photoListIndex -1)\n              }\n            }}\n            onMoveNextRequest={()=>{\n              if(photoList[photoListIndex+1] !== undefined) {\n                setPhotoListIndex(photoListIndex +1)\n              }\n            }}\n            reactModalStyle={{overlay: {zIndex: 9999}}}\n          />\n      }\n\n    </>\n  );\n}\n"],"sourceRoot":""}