{"version":3,"sources":["views/Fin_Pagar_Receber.js"],"names":["Pagar_Receber","value","api","useApi","useState","loading","setLoading","list","setList","showModal","setShowModal","modalLoading","setModalLoading","modalTitleField","setModalTitleField","modalLancamentoField","setModalLancamentoField","modalDataPagtoField","setModalDataPagtoField","modalBanco_idField","setModalBanco_idField","modalConta_idField","setModalConta_idField","modalPessoa_idField","setModalPessoa_idField","modalId","setModalId","fields","label","key","_style","width","toLocaleString","minimumFractionDigits","useEffect","getList","getFin_Pagar_Receber","result","error","handleCloseModal","handleRemoveButton","id","window","confirm","removeWall","alert","handleModalSave","data","title","lancamento","data_pagto","banco_id","conta_id","pessoa","addWall","updateWall","color","onClick","name","items","noItemsViewSlot","hover","striped","bordered","border","clickableRows","captionSlot","pagination","itemsPerPage","scopedSlots","actions","item","index","findIndex","v","handleEditButton","show","onClose","closeButton","htmlFor","type","placeholder","onChange","e","target","disabled"],"mappings":"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","file":"static/js/13.d347ee0d.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  CRow,\n  CCol,\n  CCard,\n  CCardHeader,\n  CButton,\n  CCardBody,\n  CDataTable,\n  CButtonGroup,\n  CModal,\n  CModalHeader,\n  CModalBody,\n  CModalFooter,\n  CFormGroup,\n  CLabel,\n  CInput,\n  CTextarea,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport useApi from \"../services/api\";\n\nexport default function Pagar_Receber() {\n  const api = useApi();\n\n  const [loading, setLoading] = useState(true);\n  const [list, setList] = useState([]);\n  const [showModal, setShowModal] = useState(false);\n  const [modalLoading, setModalLoading] = useState(false);\n  const [modalTitleField, setModalTitleField] = useState(\"\");\n  const [modalLancamentoField, setModalLancamentoField] = useState(\"\");\n  const [modalDataPagtoField, setModalDataPagtoField] = useState(\"\");\n  const [modalBanco_idField, setModalBanco_idField] = useState(\"\");\n  const [modalConta_idField, setModalConta_idField] = useState(\"\");\n  const [modalPessoa_idField, setModalPessoa_idField] = useState(\"\");\n  const [modalId, setModalId] = useState(\"\");\n  const formatCurrency = (value) =>  {\n//    return value.toLocaleString('pt-BR', {style: 'currency', currency: 'BRL'})\n    return value.toLocaleString('pt-BR', { minimumFractionDigits: 2})\n  };\n\n  const fields = [\n    { label: \"Lançto\", key: \"id\", _style: { width: \"10px\" } },\n    {\n        label: \"Data\",\n        key: \"data_pagamento\",\n        _style: { width: \"10px\" },\n      },\n  \n    { label: \"Banco\", key: \"banco_desc\", _style: { width: \"80px\" } },\n    { label: \"Conta\", key: \"conta_desc\", _style: { width: \"80px\" } },\n    { label: \"Pessoa_id\", key: \"pessoa_desc\", _style: { width: \"80px\" } },\n    { label: \"Valor\", key: formatCurrency(\"valor_pagamento\"), _style:{width: \"80px\"} },\n    { label: \"Ações\", key: \"actions\", _style:{width:\"1px\"}},\n  ];\n\n  useEffect(() => {\n    getList();\n  }, []);\n\n  const getList = async () => {\n    setLoading(true);\n    const result = await api.getFin_Pagar_Receber();\n    setLoading(false);\n    if (result.error === \"\") {\n      setList(result.list);\n    } else {\n      setList(result.error);\n    }\n  };\n\n  const handleCloseModal = () => {\n    setShowModal(false);\n  };\n\n  const handleEditButton = (id) => {\n//  const handleEditButton = (lancamento) => {\n    let index = list.findIndex(v=>v.id===id);\n    setModalId(list[index][\"id\"]);\n    setModalTitleField(list[index][\"title\"]);\n    setModalLancamentoField(list[index][\"lancamento\"]);\n    setModalDataPagtoField(list[index][\"data_pagto\"]);\n    setModalBanco_idField(list[index][\"banco_idField\"]); \n    setModalConta_idField(list[index][\"conta_id\"]);\n    setModalPessoa_idField(list[index][\"pessoa_id\"]);\n    setShowModal(true);\n  };\n\n  const handleRemoveButton = async (id) => {\n    if (window.confirm(\"Confirma a exclusão?\")) {\n      const result = await api.removeWall(id);\n      if (result.error === \"\") {\n        getList();\n      } else {\n        alert(result.error);\n      }\n    }\n  };\n\n  const handleNewButton = () => {\n    setModalId(\"\");\n    setModalTitleField(\"\");\n\n    setModalLancamentoField(\"\"); \n    setModalDataPagtoField(\"\");\n    setModalBanco_idField(\"\");\n    setModalConta_idField(\"\");\n    setModalPessoa_idField(\"\");\n    setShowModal(true);\n  };\n\n  const handleModalSave = async () => {\n    if (modalTitleField && modalDataPagtoField) {\n      setModalLoading(true);\n      let result;\n      let data = {\n        title: modalTitleField,\n        lancamento: modalLancamentoField,\n        data_pagto: modalDataPagtoField,\n        banco_id: modalBanco_idField,\n        conta_id: modalConta_idField,\n        pessoa: modalPessoa_idField,\n      };\n\n      if (modalId === \"\") {\n        result = await api.addWall(data);\n      } else {\n        result = await api.updateWall(modalId, data);\n      }\n\n      setModalLoading(false);\n      if (result.error === \"\") {\n        setShowModal(false);\n        getList();\n      } else {\n        alert(result.error);\n      }\n    } else {\n      alert(\"Preencha os campos!\");\n    }\n  };\n\n  return (\n    <>\n      <CRow>\n        <CCol>\n          <h2>Contas a Pagar e Receber</h2>\n          <CCard>\n            <CCardHeader>\n              <CButton color=\"primary\" onClick={handleNewButton}>\n                <CIcon name=\"cil-check\" />\n                Inclusão\n              </CButton>\n            </CCardHeader>\n            <CCardBody>\n              <CDataTable\n                items={list}\n                fields={fields}\n                loading={loading}\n                noItemsViewSlot=\" \"\n                hover\n                striped\n                bordered\n                border\n                clickableRows\n                captionSlot={5}\n                pagination\n                itemsPerPage={10}\n                scopedSlots={{\n                  actions: (item) => (\n                    <td>\n                      <CButtonGroup>\n                        <CButton\n                          color=\"info\"\n                          onClick={() => handleEditButton(item.id)}                          \n                        >\n                          Alterar\n                        </CButton>\n                        <CButton\n                          color=\"danger\"\n                          onClick={() => handleRemoveButton(item.id)}                          \n                        >\n                          Excluir\n                        </CButton>\n                      </CButtonGroup>\n                    </td>\n                  ),\n                }}\n              />\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n\n      <CModal show={showModal} onClose={handleCloseModal}>\n        <CModalHeader closeButton>\n          {modalId === \"\" ? \"Novo\" : \"Alterar\"} - Contas a Pagar e Receber\n        </CModalHeader>\n        <CModalBody>\n          <CFormGroup>\n            <CLabel htmlFor=\"modal-title\">Titulo do Aviso</CLabel>\n            <CInput\n              type=\"text\"\n              id=\"modal-title\"\n              placeholder=\"Digite um título para o aviso\"\n              value={modalTitleField}\n              onChange={(e) => setModalTitleField(e.target.value)}\n              disabled={modalLoading}\n            />\n          </CFormGroup>\n          <CFormGroup>\n            <CLabel htmlFor=\"modal-lancamento\">Lançamento</CLabel>\n            <CInput\n              type=\"text\"\n              id=\"modal-lancamento\"\n              placeholder=\"Digite o número do Lançamento\"\n              value={modalLancamentoField}\n              onChange={(e) => setModalLancamentoField(e.target.value)}\n              disabled={modalLoading}\n            />\n          </CFormGroup>\n          <CFormGroup>\n            <CLabel htmlFor=\"modal-data_pagto\">Data do Pagamento</CLabel>\n            <CTextarea\n              id=\"modal-data_pagto\"\n              placeholder=\"Digite o Data do Pagamento\"\n              value={modalDataPagtoField}\n              onChange={(e) => setModalDataPagtoField(e.target.value)}\n              disabled={modalLoading}\n            />\n          </CFormGroup>\n\n          <CFormGroup>\n            <CLabel htmlFor=\"modal-conta_id\">Conta Plano</CLabel>\n            <CInput\n              type=\"text\"\n              id=\"modal-conta_id\"\n              value={modalConta_idField}\n              onChange={(e) => setModalConta_idField(e.target.value)}\n              disabled={modalLoading}\n              width={\"1px\"}\n            />\n          </CFormGroup>\n\n\n\n        </CModalBody>\n        <CModalFooter>\n          <CButton\n            color=\"primary\"\n            onClick={handleModalSave}\n            disabled={modalLoading}\n          >\n            {modalLoading ? \"Carregando...\" : \"Salvar\"}\n          </CButton>\n          <CButton\n            color=\"secondary\"\n            onClick={handleCloseModal}\n            disabled={modalLoading}\n          >\n            {modalLoading ? \"Carregando...\" : \"Cancelar\"}\n          </CButton>\n        </CModalFooter>\n      </CModal>\n    </>\n  );\n}\n"],"sourceRoot":""}