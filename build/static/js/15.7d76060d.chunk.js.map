{"version":3,"sources":["views/FoundAndLost.js"],"names":["Wall","api","useApi","useState","loading","setLoading","list","setList","photoUrl","setPhotoUrl","useEffect","getList","getFoundAndLost","result","error","handleSwitchClick","item","updateFoundAndLost","id","alert","items","fields","label","key","filter","sorter","noItemsViewSlot","columnFilter","hover","striped","bordered","pagination","itemsPerPage","scopedSlots","photo","color","onClick","url","datecreated_formatted","checked","status","onChange","e","mainSrc","onCloseRequest","reactModalStyle","overlay","zIndex"],"mappings":"8SAce,SAASA,IACtB,IAAMC,EAAMC,cAEZ,EAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAgCJ,mBAAS,IAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KAUAC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAO,iDAAG,qGACdN,GAAW,GADG,SAEOJ,EAAIW,kBAFX,OAERC,EAFQ,OAGdR,GAAW,GACU,KAAjBQ,EAAOC,MACTP,EAAQM,EAAOP,MAEfC,EAAQM,EAAOC,OAPH,2CAAH,qDAWPC,EAAiB,iDAAG,WAAOC,GAAP,wFACxBX,GAAW,GADa,SAEHJ,EAAIgB,mBAAmBD,EAAKE,IAFzB,OAElBL,EAFkB,OAGxBR,GAAW,GACS,KAAjBQ,EAAOC,MACRH,IAEAQ,MAAMN,EAAOC,OAPS,2CAAH,sDAevB,OACE,qCACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,oDACA,cAAC,IAAD,UAEE,cAAC,IAAD,UACE,cAAC,IAAD,CACEM,MAAOd,EACPe,OAhDC,CACb,CAAEC,MAAO,aAAcC,IAAK,SAASC,QAAQ,EAAMC,QAAQ,GAC3D,CAAEH,MAAO,mBAAoBC,IAAK,QAAQE,QAAQ,GAClD,CAAEH,MAAO,kBAAaC,IAAK,cAAcE,QAAQ,GACjD,CAAEH,MAAO,OAAQC,IAAK,QAAQC,QAAQ,EAAMC,QAAQ,GACpD,CAAEH,MAAO,OAAQC,IAAK,gBA4CVnB,QAASA,EACTsB,gBAAgB,IAChBC,cAAY,EACZF,QAAM,EACNG,OAAK,EACLC,SAAO,EACPC,UAAQ,EACRC,YAAU,EACVC,aAAc,GACdC,YAAa,CACZ,MAAS,SAACjB,GAAD,OACP,6BACGA,EAAKkB,OACH,cAAC,IAAD,CAASC,MAAM,UAAUC,QAAS,kBA5BlCC,EA4BmDrB,EAAKkB,WA3B5EzB,EAAY4B,GADO,IAACA,GA4BA,yBAMP,YAAe,SAACrB,GAAD,OACd,6BACGA,EAAKsB,yBAGT,OAAU,SAACtB,GAAD,OACT,6BACE,cAAC,IAAD,CACEuB,QAAyB,cAAhBvB,EAAKwB,OACdL,MAAM,UACNM,SAAU,SAACC,GAAD,OAAK3B,EAAkBC,qBAWhDR,GACG,cAAC,IAAD,CACEmC,QAASnC,EACToC,eAAgB,kBAAInC,EAAY,KAChCoC,gBAAiB,CAACC,QAAS,CAACC,OAAQ","file":"static/js/15.7d76060d.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  CRow,\n  CCol,\n  CCard,\n  CCardBody,\n  CButton,\n  CSwitch,\n  CDataTable,\n} from \"@coreui/react\";\nimport useApi from \"../services/api\";\nimport Lightbox from \"react-image-lightbox\";\nimport \"react-image-lightbox/style.css\"\n\nexport default function Wall() {\n  const api = useApi();\n\n  const [loading, setLoading] = useState(true);\n  const [list, setList] = useState([]);\n  const [photoUrl, setPhotoUrl] = useState(\"\");\n  \n  const fields = [\n    { label: \"Recuperado\", key: \"status\",filter: false,sorter: false},\n    { label: \"Local Encontrado\", key: \"where\",sorter: false},\n    { label: \"Descrição\", key: \"description\",sorter: false},\n    { label: \"Foto\", key: \"photo\",filter: false,sorter: false},\n    { label: \"Data\", key: \"datecreated\"},\n  ];\n\n  useEffect(() => {\n    getList();\n  }, []);\n\n  const getList = async () => {\n    setLoading(true);\n    const result = await api.getFoundAndLost();\n    setLoading(false);\n    if (result.error === \"\") {\n      setList(result.list);\n    } else {\n      setList(result.error);\n    }\n  };\n\n  const handleSwitchClick = async (item) => {\n    setLoading(true)\n    const result = await api.updateFoundAndLost(item.id)\n    setLoading(false)\n    if(result.error === \"\") {\n      getList()\n    } else {\n      alert(result.error)\n    }\n  }\n\n  const showLightbox = (url) => {\n    setPhotoUrl(url)\n  }\n\n  return (\n    <>\n      <CRow>\n        <CCol>\n          <h2>Achados e Perdidos</h2>\n          <CCard>\n          \n            <CCardBody>\n              <CDataTable\n                items={list}\n                fields={fields}\n                loading={loading}\n                noItemsViewSlot=\" \"\n                columnFilter\n                sorter\n                hover\n                striped\n                bordered\n                pagination\n                itemsPerPage={10}\n                scopedSlots={{\n                 \"photo\": (item) => (\n                   <td>\n                     {item.photo &&\n                        <CButton color=\"success\" onClick={()=>showLightbox(item.photo)}>\n                          Ver foto\n                        </CButton>\n                     }\n                   </td>\n                 ),\n                 \"datecreated\": (item) => (\n                  <td>\n                    {item.datecreated_formatted}\n                  </td>\n                 ),\n                 \"status\": (item) => (\n                  <td>\n                    <CSwitch\n                      checked={item.status === \"recovered\"}\n                      color=\"success\"\n                      onChange={(e)=>handleSwitchClick(item)}\n                    />\n                  </td>\n                 ),\n                }}\n              />\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      \n      {photoUrl &&\n          <Lightbox\n            mainSrc={photoUrl}\n            onCloseRequest={()=>setPhotoUrl(\"\")}\n            reactModalStyle={{overlay: {zIndex: 9999}}}\n          />\n      }\n\n    </>\n  );\n}\n"],"sourceRoot":""}