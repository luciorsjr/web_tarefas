{"version":3,"sources":["views/Wall.js"],"names":["Wall","api","useApi","useState","loading","setLoading","list","setList","showModal","setShowModal","modalLoading","setModalLoading","modalTitleField","setModalTitleField","modalBodyField","setModalBodyField","modalId","setModalId","useEffect","getList","getWall","result","error","handleCloseModal","handleRemoveButton","id","window","confirm","removeWall","alert","handleModalSave","data","title","body","addWall","updateWall","color","onClick","name","items","fields","label","key","_style","width","noItemsViewSlot","hover","striped","bordered","pagination","itemsPerPage","scopedSlots","actions","item","index","findIndex","v","handleEditButton","show","onClose","closeButton","htmlFor","type","placeholder","value","onChange","e","target","disabled"],"mappings":"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","file":"static/js/22.12a59582.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  CRow,\n  CCol,\n  CCard,\n  CCardHeader,\n  CButton,\n  CCardBody,\n  CDataTable,\n  CButtonGroup,\n  CModal,\n  CModalHeader,\n  CModalBody,\n  CModalFooter,\n  CFormGroup,\n  CLabel,\n  CInput,\n  CTextarea,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport useApi from \"../services/api\";\n\nexport default function Wall() {\n  const api = useApi();\n\n  const [loading, setLoading] = useState(true);\n  const [list, setList] = useState([]);\n  const [showModal, setShowModal] = useState(false);\n  const [modalLoading, setModalLoading] = useState(false);\n  const [modalTitleField, setModalTitleField] = useState(\"\");\n  const [modalBodyField, setModalBodyField] = useState(\"\");\n  const [modalId, setModalId] = useState(\"\");\n\n  const fields = [\n    { label: \"Título\", key: \"title\" },\n    {\n      label: \"Data de Criação\",\n      key: \"datecreated\",\n      _style: { width: \"200px\" },\n    },\n    { label: \"Ações\", key: \"actions\", _style: { width: \"1px\" } },\n  ];\n\n  useEffect(() => {\n    getList();\n  }, []);\n\n  const getList = async () => {\n    setLoading(true);\n    const result = await api.getWall();\n    setLoading(false);\n    if (result.error === \"\") {\n      setList(result.list);\n    } else {\n      setList(result.error);\n    }\n  };\n\n  const handleCloseModal = () => {\n    setShowModal(false);\n  };\n\n  const handleEditButton = (id) => {\n    let index = list.findIndex(v=>v.id===id)\n    setModalId(list[index][\"id\"]);\n    setModalTitleField(list[index][\"title\"]);\n    setModalBodyField(list[index][\"body\"]);\n    setShowModal(true);\n  };\n\n  const handleRemoveButton = async (id) => {\n    if (window.confirm(\"Tem certeza que deseja excluir?\")) {\n      const result = await api.removeWall(id);\n      if (result.error === \"\") {\n        getList();\n      } else {\n        alert(result.error);\n      }\n    }\n  };\n\n  const handleNewButton = () => {\n    setModalId(\"\");\n    setModalTitleField(\"\");\n    setModalBodyField(\"\");\n    setShowModal(true);\n  };\n\n  const handleModalSave = async () => {\n    if (modalTitleField && modalBodyField) {\n      setModalLoading(true);\n      let result;\n      let data = {\n        title: modalTitleField,\n        body: modalBodyField,\n      };\n\n      if (modalId === \"\") {\n        result = await api.addWall(data);\n      } else {\n        result = await api.updateWall(modalId, data);\n      }\n\n      setModalLoading(false);\n      if (result.error === \"\") {\n        setShowModal(false);\n        getList();\n      } else {\n        alert(result.error);\n      }\n    } else {\n      alert(\"Preencha os campos!\");\n    }\n  };\n\n  return (\n    <>\n      <CRow>\n        <CCol>\n          <h2>Mural de Avisos</h2>\n          <CCard>\n            <CCardHeader>\n              <CButton color=\"primary\" onClick={handleNewButton}>\n                <CIcon name=\"cil-check\" />\n                Novo Aviso\n              </CButton>\n            </CCardHeader>\n            <CCardBody>\n              <CDataTable\n                items={list}\n                fields={fields}\n                loading={loading}\n                noItemsViewSlot=\" \"\n                hover\n                striped\n                bordered\n                pagination\n                itemsPerPage={5}\n                scopedSlots={{\n                  actions: (item) => (\n                    <td>\n                      <CButtonGroup>\n                        <CButton\n                          color=\"info\"\n                          onClick={() => handleEditButton(item.id)}\n                        >\n                          Editar\n                        </CButton>\n                        <CButton\n                          color=\"danger\"\n                          onClick={() => handleRemoveButton(item.id)}\n                        >\n                          Excluir\n                        </CButton>\n                      </CButtonGroup>\n                    </td>\n                  ),\n                }}\n              />\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n\n      <CModal show={showModal} onClose={handleCloseModal}>\n        <CModalHeader closeButton>\n          {modalId === \"\" ? \"Novo\" : \"Editar\"} Aviso\n        </CModalHeader>\n        <CModalBody>\n          <CFormGroup>\n            <CLabel htmlFor=\"modal-title\">Titulo do Aviso</CLabel>\n            <CInput\n              type=\"text\"\n              id=\"modal-title\"\n              placeholder=\"Digite um título para o aviso\"\n              value={modalTitleField}\n              onChange={(e) => setModalTitleField(e.target.value)}\n              disabled={modalLoading}\n            />\n          </CFormGroup>\n          <CFormGroup>\n            <CLabel htmlFor=\"modal-body\">Corpo do Aviso</CLabel>\n            <CTextarea\n              id=\"modal-body\"\n              placeholder=\"Digite o conteudo do aviso\"\n              value={modalBodyField}\n              onChange={(e) => setModalBodyField(e.target.value)}\n              disabled={modalLoading}\n            />\n          </CFormGroup>\n        </CModalBody>\n        <CModalFooter>\n          <CButton\n            color=\"primary\"\n            onClick={handleModalSave}\n            disabled={modalLoading}\n          >\n            {modalLoading ? \"Carregando...\" : \"Salvar\"}\n          </CButton>\n          <CButton\n            color=\"secondary\"\n            onClick={handleCloseModal}\n            disabled={modalLoading}\n          >\n            {modalLoading ? \"Carregando...\" : \"Cancelar\"}\n          </CButton>\n        </CModalFooter>\n      </CModal>\n    </>\n  );\n}\n"],"sourceRoot":""}